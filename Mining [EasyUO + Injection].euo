; Configuration
if ( #charName = Stella )
{
    set %mines 10
    set %runebookId PIWYJMD
    set %dropContainerId XWNAKMD
    set %emergencyBankingActivated #true
    set %craftCopperPickaxes #true
    set %craftAgapitePickaxes #true
}
if ( #charName = Bentley )
{
    set %mines 9
    set %runebookId BOYBKMD
    set %dropContainerId XWNAKMD
    set %emergencyBankingActivated #false
    set %craftCopperPickaxes #false
    set %craftAgapitePickaxes #false
}
set %smeltWeight 350             ; Weight needed to go smelt
set %bankWeight 175              ; Weight above this value after smelting will trigger a bank
set %bankIronIngots 100          ; Iron ingots above this value after smelting will trigger a bank
set %percentSwitchMine 70        ; Percentage at which it will trigger a mine switch after banking
set %smelt1x1 #false             ; Smelt ores one by one (#true/#false)
set %miningToolsRecharge 4       ; Amount of mining tools to have before going back mining (1 if you got newbied pickaxe)
set %rechargeRunebook #true      ; Recharge runebook (#true/#false)
set %maxRunebookCharges 10       ; Maximum charges in runebook
set %miningToolsToCraft 10       ; When out of pickaxes, amount to craft
set %maximumPathfindDistance 17  ; Maximum distance to pathFind
set %smartPathFindTimeout 60     ; Maximum time allowed per smart pathfind (seconds)
set %pathfindTimeout 10          ; Maximum time allowed per pathfind (seconds)
set %miningTimeout 8             ; Maximum time allowed per mining stroke (seconds)
set %nodeMaximumTries 3          ; Maximum failed attempts per mining node before going to the next
set %deathTimer 5                ; Time to wait before resurrecting (minutes)
set %searchForgeDistance 8       ; Maximum distance forge will be from recall location
set %useInjectionDragDrop #true  ; Use Injection's ,moveitem instead of EasyUO's exevent drag/drop

; Constants
set %tinkeringTools GTL
set %ironRequiredMiningTool 8
set %copperRequiredMiningTool 30
set %agapiteRequiredMiningTool 30
set %miningTools NPF_QPF
set %forge JBG
set %oresStacks DWJ_EWJ_GWJ
set %oresOne TVJ
set %ores %oresStacks , _ , %oresOne
set %ironIngots RMK
set %ingots %ironIngots , _NMK_XMK_TMK
set %oresIngots %ores , _ , %ingots
set %recallScrolls WTL
set %potion WUF
set %invisibilityPotionColor 1585
set %pathFindMineSpotTolerance 0
set %pathFindForgeTolerance 1
set %treasureBalls DMF
set %humans IS_HS
set %minerKillersId XVZM_COOO_XZTF_VHFE         ; Jason Voorhees, Firulais, Unknown; Game Over

; Stats
set %ironCollected 0
set %stoneCollected 0
set %copperCollected 0
set %agapiteCollected 0
set %silverCollected 0
set %shadowCollected 0
set %goldCollected 0
set %roseCollected 0
set %valoriteCollected 0
set %veriteCollected 0
set %mytherilCollected 0
set %bloodrockCollected 0
set %blackrockCollected 0
set %platinumCollected 0
set %ironMiningToolsUsed 0
set %copperMiningToolsUsed 0
set %agapiteMiningToolsUsed 0
set %recallScrollsUsed 0
set %invisibilityPotionsUsed 0
set %deaths 0

; Costs
set %ironValue 15
set %stoneValue 10
set %ironMiningToolCost %ironValue * %ironRequiredMiningTool
set %recallScrollCost 50
set %invisibilityPotionCost 100

; Do not change
set %mustBank #false
set %emergencyBanking #false
set %mineChanged #true
set %currentMine 1
set %start #scnt

tile init

miningLoop:
set %mustBank #false
set %emergencyBanking #false
if ( %mineChanged = #false )
    goto _miningLoop
gosub resetForge
gosub resetSpots
set %mineChanged #false
for %miningLoop 1 %spots
{
    _miningLoop:
    gosub updateStatisticsMenu
    set %mineX %spotX . %miningLoop
    set %mineY %spotY . %miningLoop
    set %mineZ %spotZ . %miningLoop

    gosub hasUnminedTileAround %mineX %mineY
    if ( #result = #true )
    {
        gosub smartPathFind %mineX %mineY %mineZ %pathFindMineSpotTolerance
        if ( #result = #true )
        {
            set %_startX %mineX - 1
            set %_startY %mineY - 1
            set %_endX %mineX + 1
            set %_endY %mineY + 1

            for %_loopX %_startX %_endX
            {
                for %_loopY %_startY %_endY
                {
                    if ( %_loopX = %mineX && %_loopY = %mineY )
                        continue

                    gosub isLocationMineable %_loopX %_loopY
                    if ( #result = #true )
                    {
                        set %spotsMined %spotsMined + 1
                        set %_mineLocation %1 , _ , %2
                        set %_mineLocationTileType %spotTileType . %_mineLocation
                        set %_mineLocationZ %spotZ . %_mineLocation

                        gosub mine %_loopX %_loopY %_mineLocationZ %_mineLocationTileType

                        set %spotMined . %_mineLocation #true
                    }

                    if ( #charGhost = yes )
                        goto switchMine

                    if ( %mustBank = #true )
                    {
                        set %percentDone %spotsMined * 100 / %spots
                        if ( %percentDone >= %percentSwitchMine || %emergencyBanking = #true )
                            goto switchMine
                        goto skipMine
                    }
                }
            }
        }
    }
}
switchMine:
set %mineChanged #true
set %currentMine %currentMine + 1
if ( %currentMine > %mines )
    set %currentMine 1
skipMine:
if ( %emergencyBanking = #false )
{
    gosub smartPathFind %forgeX %forgeY %forgeZ %pathFindForgeTolerance
    gosub smelt
}
if ( #charGhost = yes )
{
    gosub updateLastDeathValues
    set %deaths %deaths + 1
    gosub resurrect
}
gosub bank
wait 20
goto miningLoop

sub resetForge
findItem %forge G_ , %searchForgeDistance
if ( #findKind = -1 )
    pause
set %forgeX #findX
set %forgeY #findY
set %forgeZ #findZ
return

sub resetSpots
linesPerCycle 1000
nameSpace local resetSpots
nameSpace clear
set %currentSpot 1
set %spots 1
set %spotX1 #charPosX
set %spotY1 #charPosY
set %spotsMined 0

while ( %currentSpot <= %spots )
{
    set %_startX ( %spotX . %currentSpot ) - 1
    set %_endX ( %spotX . %currentSpot ) + 1
    set %_startY ( %spotY . %currentSpot ) - 1
    set %_endY ( %spotY . %currentSpot ) + 1

    for %_loopX %_startX %_endX
    {
        for %_loopY %_startY %_endY
        {
            if ( %_loopX = %currentSpotX && %_loopY = %currentSpotY )
                continue;

            set %_spotLocation %_loopX , _ , %_loopY
            set %spotAlreadyChecked !spotChecked . %_spotLocation
            if ( %spotAlreadyChecked = #true )
                continue

            set !spotChecked . %_loopX , _ , %_loopY #true

            gosub getMineableTileInfo %_loopX %_loopY
            if ( #result = #true )
            {
                set %spots %spots + 1
                ; Informations needed for pathfind
                set %spotX . %spots %_loopX
                set %spotY . %spots %_loopY
                set %spotZ . %spots %_isTileMineableZ
                ; Informations needed to mine
                set %spotMined . %_spotLocation #false
                set %spotTileType . %_spotLocation %_isTileMineableTileType
                set %spotZ . %_spotLocation %_isTileMineableZ
            }
        }
    }

    set %currentSpot %currentSpot + 1
}
linesPerCycle 10
return

sub getMineableTileInfo
set %_isTileMineable #false
set %_isTileMineableX %1
set %_isTileMineableY %2
tile cnt %_isTileMineableX %_isTileMineableY
for %_isTileMineableLoop 1 #tileCnt
{
    tile get %_isTileMineableX %_isTileMineableY %_isTileMineableLoop

    if ( #tileName in stalagmites_flowstone_cave_wall )
        return #false

    if ( #tileType >= 1339 && #tileType <= 1359 )
    {
        set %_isTileMineableZ #tileZ
        set %_isTileMineableTileType #tileType
        set %_isTileMineable #true
    }
}
return %_isTileMineable

; gosub hasUnminedTileAround locationX locationY
sub hasUnminedTileAround
set %_hasUnminedTileAroundLocationX %1
set %_hasUnminedTileAroundLocationY %2
set %_hasUnminedTileAroundStartX %_hasUnminedTileAroundLocationX - 1
set %_hasUnminedTileAroundStartY %_hasUnminedTileAroundLocationY - 1
set %_hasUnminedTileAroundEndX %_hasUnminedTileAroundLocationX + 1
set %_hasUnminedTileAroundEndY %_hasUnminedTileAroundLocationY + 1

for %_hasUnminedTileAroundLoopX %_hasUnminedTileAroundStartX %_hasUnminedTileAroundEndX
{
    for %_hasUnminedTileAroundLoopY %_hasUnminedTileAroundStartY %_hasUnminedTileAroundEndY
    {
        if ( %_hasUnminedTileAroundLoopX = %_hasUnminedTileAroundLocationX && %_hasUnminedTileAroundLoopY = %_hasUnminedTileAroundLocationY )
            continue ; can't mine under yourself

        gosub isLocationMineable %_hasUnminedTileAroundLoopX %_hasUnminedTileAroundLoopY
        if ( #result = #true )
            return #true
    }
}
return #false

; gosub isLocationMineable x y
sub isLocationMineable
set %_isLocationMineableX_Y %1 , _ , %2
set %_isLocationMineableIsMined %spotMined . %_isLocationMineableX_Y
if ( %_isLocationMineableIsMined = #false )
    return #true
return #false ; this case handle N/A

; gosub smartPathFind [x] [y] [z] [tolerance]
sub smartPathFind
linesPerCycle 1000
set %_smartPathFindX %1
set %_smartPathFindY %2
set %_smartPathFindZ %3
set %_smartPathFindTolerance %4
set %_smartPathFindTimeout #scnt + %smartPathFindTimeout
gosub isCharPosWithinTolerance %_smartPathFindX %_smartPathFindY %maximumPathfindDistance
while ( #result = #false )
{
    if ( %_smartPathFindTimeout < #scnt )
        break

    set %_bestCandidateX #charPosX
    set %_bestCandidateY #charPosY
    set %_bestCandidateZ #charPosZ

    for %_candidate 1 %spots
    {
        set %_candidateX %spotX . %_candidate
        set %_candidateY %spotY . %_candidate
        set %_candidateZ %spotZ . %_candidate

        gosub isBetterSmartPathFindCandidate %_candidateX %_candidateY %_smartPathFindX %_smartPathFindY %_bestCandidateX %_bestCandidateY %maximumPathfindDistance
        if ( #result = #true )
        {
            set %_bestCandidateX %_candidateX
            set %_bestCandidateY %_candidateY
            set %_bestCandidateZ %_candidateZ
        }
    }

    if ( %_bestCandidateX = #charPosX && %_bestCandidateY = #charPosY )
        goto _smartPathFindReturnFalse ; no candidate found

    gosub pathFind %_bestCandidateX %_bestCandidateY %_bestCandidateZ %_smartPathFindTolerance
    if ( #result = #false )
        goto _smartPathFindReturnFalse
    gosub isCharPosWithinTolerance %_smartPathFindX %_smartPathFindY %maximumPathfindDistance
}
linesPerCycle 10
gosub pathFind %_smartPathFindX %_smartPathFindY %_smartPathFindZ %_smartPathFindTolerance %_smartPathFindTimeout
return #result
_smartPathFindReturnFalse:
linesPerCycle 10
return #false

; gosub isBetterSmartPathFindCandidate candidateX candidateY destinationX destinationY bestCandidateX bestCandidateY maxDistance
sub isBetterSmartPathFindCandidate
set %_distanceToCandidateX #charPosX - %1 abs
set %_distanceToCandidateY #charPosY - %2 abs

if ( %_distanceToCandidateX > %7 || %_distanceToCandidateY > %7 )
    return #false ; Candidate is out of reach

set %_distanceCandidateToDestinationX %1 - %3 abs
set %_distanceCandidateToDestinationY %2 - %4 abs
set %_distanceCandidateToDestination %_distanceCandidateToDestinationX + %_distanceCandidateToDestinationY

set %_distanceBestCandidateToDestinationX %5 - %3 abs
set %_distanceBestCandidateToDestinationY %6 - %4 abs
set %_distanceBestCandidateToDestination %_distanceBestCandidateToDestinationX + %_distanceBestCandidateToDestinationY

if ( %_distanceCandidateToDestination < %_distanceBestCandidateToDestination )
    return #true ; Candidate is in reach and nearer to wanted destination

return #false ; Candidate is in reach, but farer to wanted destination

; gosub pathfind [x] [y] [z] [tolerance]
sub pathfind
set %_pathFindX %1
set %_pathFindY %2
set %_pathFindZ %3
set %_pathFindTolerance %4
set %_pathfindMoved #false
set %_timeout #scnt + %pathfindTimeout
set %_journal #jIndex + 1
gosub isCharPosWithinTolerance %_pathFindX %_pathFindY %_pathFindTolerance
if ( #result = #true )
{
    if ( %_pathfindMoved = #true )
        event pathfind 0 0 0
    return #true
}
event pathfind %_pathFindX %_pathFindY %_pathFindZ
_pathfind:
gosub isCharPosWithinTolerance %_pathFindX %_pathFindY %_pathFindTolerance
if ( #result = #true )
{
    if ( %_pathfindMoved = #true )
        event pathfind 0 0 0
    return #true
}
if ( %_timeout < #scnt )
{
    if ( %_pathfindMoved = #true )
        event pathfind 0 0 0
    return #false
}
if ( %_journal <= #jIndex )
{
    scanJournal %_journal
    if ( get_there in #journal )
        return #false
    if ( pathfinding in #journal )
        set %_pathfindMoved #true
    set %_journal %_journal + 1
}
goto _pathfind

sub isCharPosWithinTolerance
set %_x %1
set %_y %2
set %_dist %3
set %_distX #charPosX - %_x abs
set %_distY #charPosY - %_y abs
if ( %_distX <= %_dist && %_distY <= %_dist )
    return #true
return #false

sub mine
set %_mineX %1
set %_mineY %2
set %_mineZ %3
set %_mineTile %4
set %_nodeTries 0
_mine:
findItem %minerKillersId
if ( %emergencyBankingActivated = #true && #findKind <> -1 )
{
    set %mustBank #true
    set %emergencyBanking #true
    
    return
}
set %_nodeTries %_nodeTries + 1
if ( %_nodeTries > %nodeMaximumTries )
    return
if ( #weight >= %smeltWeight )
{
    gosub smartPathFind %forgeX %forgeY %forgeZ %pathFindForgeTolerance
    gosub smelt
    wait 10
    
    gosub isBankingRequired
    if ( #result = #true )
    {
        set %mustBank #true

        return
    }
    gosub smartPathFind %_mineX %_mineY %_mineZ %pathFindMineSpotTolerance
}
findItem %miningTools C_
if ( #findKind = -1 )
{
    set %mustBank #true

    return
}
set #lObjectId #findId
set #lTargetX %_mineX
set #lTargetY %_mineY
set #lTargetZ %_mineZ
set #lTargetTile %_mineTile
set #lTargetKind 3
set %_journal #jIndex
event macro 17
target
event macro 22
set %_mine #scnt + %miningTimeout
_mineJournal:
findItem %minerKillersId
if ( %emergencyBankingActivated = #true && #findKind <> -1 )
{
    set %mustBank #true
    set %emergencyBanking #true

    return
}
if ( %_mine < #scnt )
    return
if ( #jIndex <= %_journal )
    goto _mineJournal
set %_journal %_journal + 1
scanJournal %_journal
if ( there_is_nothing_here in #journal )
    return
if ( you_loosen_some_rocks in #journal )
    goto _mine
if ( you_put in #journal )
{
    set %_nodeTries 0
    goto _mine
}
if ( you_cannot_mine in #journal )
    return
if ( you_have_no_line in #journal )
    return
if ( try_mining_elsewhere in #journal )
    return
if ( that_is_too_far in #journal )
    return
goto _mineJournal

sub smelt
if ( %smelt1x1 = #true )
    gosub separateOres
ignoreItem reset
_smelt:
findItem %ores C_ , #backPackId
if ( #findKind = -1 )
    return
set #lObjectId #findId
set %_journal #jIndex + 1
event macro 17
for %_loop %_journal #jIndex
{
    scanJournal %_loop
    if ( you_need_atleast in #journal )
        ignoreItem #findId
    if ( you_must_be_near in #journal )
        ignoreItem #findId
}
wait 5
goto _smelt

sub separateOres
ignoreitem reset
_seperateOres:
finditem %oresStacks C_ , #backpackId
if ( #findKind = -1 )
    return
ignoreitem #findId
gosub dragDropContainer #findId 1 #backPackId 80 80
goto _seperateOres

sub isBankingRequired
if ( #weight >= %bankWeight )
    return #true
gosub findContainerStack #backPackId %ironIngots 0
if ( #result >= %bankIronIngots )
    return #true
return #false

; gosub findContainerStack containerId itemId color
sub findContainerStack
set %_findContainerStackContainerId %1
set %_findContainerStackItemId %2
set %_findContainerStackColor %3
ignoreItem reset
_findContainerStack:
findItem %_findContainerStackItemId C_ , %_findContainerStackContainerId
if ( #findKind = -1 )
    return 0
if ( #findCol <> %_findContainerStackColor )
{
    ignoreItem #findId
    goto _findContainerStack
}
return #findStack

; gosub recall [rune]
sub recall
set %_recallRune %1
if ( %_recallRune <= 8 ) ; First page
{
    set %_recallRuneX 85
    set %_recallRuneY 115 + ( ( %_recallRune - 1 ) * 14 )
}
else ; Second page
{
    set %_recallRuneX 245
    set %_recallRuneY 115 + ( ( %_recallRune - 9 ) * 14 )
}
set %_recallCharPosX #charPosX
set %_recallCharPosY #charPosY
_openRunebook:
set %_recallTimeout #scnt + 10
set #lObjectId %runebookId
event macro 17
_waitOpenRunebook:
if ( %_recallTimeout < #scnt )
   goto _openRunebook
if ( #contSizeX <> 352 || #contSizeY <> 226 )
   goto _waitOpenRunebook
set %_recallTimeout #scnt + 10
click %_recallRuneX %_recallRuneY
_waitRecall:
if ( %_recallTimeout < #scnt )
    goto _openRunebook
if ( #charPosX <> %_recallCharPosX || #charPosY <> %_recallCharPosY )
    return
goto _waitRecall

sub bank
if ( %emergencyBanking = #true )
    gosub useInvisibilityPotion
gosub recall 1
gosub dropIngotsOres
gosub dropTreasureBalls
gosub dropEmptyBottles
gosub findContainerStack #backPackId %potion %invisibilityPotionColor
if ( %emergencyBankingActivated = #true && #result <= 0 )
    gosub rechargeInvisibilityPotions
gosub restockMiningTools
if ( %rechargeRunebook = #true )
    gosub rechargeRunebook
set %mineTemp %currentMine + 1
gosub recall %mineTemp
return

sub useInvisibilityPotion
ignoreItem reset
_findInvisibilityPotion:
findItem %potion C_ , #backPackId
if ( #findKind = -1 )
    return
if ( #findCol <> %invisibilityPotionColor )
{
    ignoreItem #findId
    goto _findInvisibilityPotion
}
set #lObjectId #findId
event macro 17
return

sub dropIngotsOres
ignoreItem reset
_dropIngotsOres:
findItem %oresIngots C_ , #backpackId
if ( #findKind = -1 )
    return
if ( #findType = RMK && #findCol = 0 )
    set %ironCollected %ironCollected + #findStack
if ( #findType = RMK && #findCol = 2103 )
    set %stoneCollected %stoneCollected + #findStack
if ( #findType = NMK && #findCol = 0 )
    set %copperCollected %copperCollected + #findStack
if ( #findType = RMK && #findCol = 1024 )
    set %agapiteCollected %agapiteCollected + #findStack
if ( #findType = XMK && #findCol = 0 )
    set %silverCollected %silverCollected + #findStack
if ( #findType = RMK && #findCol = 1904 )
    set %shadowCollected %shadowCollected + #findStack
if ( #findType = TMK && #findCol = 0 )
    set %goldCollected %goldCollected + #findStack
if ( #findType = RMK && #findCol = 2049 )
    set %roseCollected %roseCollected + #findStack
if ( #findType = RMK && #findCol = 1301 )
    set %valoriteCollected %valoriteCollected #findStack
if ( #findType = RMK && #findCol = 2001 )
    set %veriteCollected %veriteCollected + #findStack
if ( #findType = RMK && #findCol = 504 )
    set %mytherilCollected %mytherilCollected + #findStack
if ( #findType = RMK && #findCol = 1218 )
    set %bloodrockCollected %bloodrockCollected + #findStack
if ( #findType = RMK && #findCol = 1908 )
    set %blackrockCollected %blackrockCollected + #findStack
if ( #findType = RMK && #findCol = 1153 )
    set %platinumCollected %platinumCollected + #findStack
ignoreitem #findid
gosub dragDropContainer #findId #findStack %dropContainerId
goto _dropIngotsOres

sub dropTreasureBalls
ignoreItem reset
_dropTreasureBalls:
findItem %treasureBalls C_ , #backPackId
if ( #findKind = -1 )
    return
gosub dragDropContainer #findId 1 %dropContainerId
goto _dropTreasureBalls

sub dropEmptyBottles
ignoreItem reset
_dropEmptyBottles:
findItem %potion C_ , #backPackId
if ( #findKind = -1 )
    return
if ( #findCol <> 0 )
{
    ignoreItem #findId
    goto _dropEmptyBottles
}
gosub dragDropContainer #findId #findStack %dropContainerId
goto _dropEmptyBottles

sub rechargeInvisibilityPotions
ignoreItem reset
gosub openContainer %dropContainerId
_rechargeInvisibilityPotions:
findItem %potion C_ , %dropContainerId
if ( #findKind = -1 )
    return
if ( #findCol <> %invisibilityPotionColor )
{
    ignoreItem #findId
    goto _rechargeInvisibilityPotions
}
set %invisibilityPotionsUsed %invisibilityPotionsUsed + 1
gosub dragDropContainer #findId 1 #backPackId
return

sub restockMiningTools
ignoreItem reset
_restockMiningTools:
findItem %miningTools C_ , #backPackId
if ( #findCnt >= %miningToolsRecharge )
    return
set %miningToolsToGrab %miningToolsRecharge - #findCnt
gosub openContainer %dropContainerId
findItem %miningTools C_ , %dropContainerId
if ( #findCnt < %miningToolsToGrab )
{
    gosub craftMiningTools
    gosub dropIngotsOres ; safety
    goto _restockMiningTools
}
for %_loop 1 %miningToolsToGrab
{
    findItem %miningTools C_ , %dropContainerId
    if ( #findCol = 0 )
        set %ironMiningToolsUsed %ironMiningToolsUsed + 1
    if ( #findCol = 1601 )
        set %copperMiningToolsUsed %copperMiningToolsUsed + 1
    if ( #findCol = 1024 )
        set %agapiteMiningToolsUsed %agapiteMiningToolsUsed + 1
    gosub dragDropContainer #findId 1 #backPackId
}
return

sub findItemContainer
set %_findItemContainerContainerId %1
set %_findItemContainerItemId %2
set %_findItemContainerColor %3
ignoreItem reset
_findItemContainer:
findItem %_findItemContainerItemId C_ , %_findItemContainerContainerId
if ( #findKind = -1 )
    return #false
if ( #findCol <> %_findItemContainerColor )
{
    ignoreItem #findId
    goto _findItemContainer
}
return #true

sub craftMiningTools
msg $,cancelmenu$
ignoreItem reset
findItem %tinkeringTools C_ , %dropContainerId
if ( #findKind = -1 )
    pause
gosub dragDropContainer #findId 1 #backPackId
if ( %craftAgapitePickaxes = #true )
{
    gosub findItemContainer %dropContainerId RMK 1024
    if ( #result = #true && #findStack >= %agapiteRequiredMiningTool )
    {
        set %_ingotType RMK
        set %_ingotColor 1024
        set %_ingotPerMiningTool %agapiteRequiredMiningTool
        set %_agapiteAmount %agapiteRequiredMiningTool * %miningToolsToCraft
        if ( %_agapiteAmount > #findStack )
            set %_agapiteAmount #findStack
        gosub dragDropContainer #findId %_agapiteAmount #backPackId
        msg $,automenu 'Colored Pickaxes' 'Agapite Pickaxe'$
        goto _craftMiningTool
    }
}
if ( %craftCopperPickaxes = #true )
{
    gosub findItemContainer %dropContainerId NMK 0
    if ( #result = #true && #findStack >= %copperRequiredMiningTool )
    {
        set %_ingotType NMK
        set %_ingotColor 0
        set %_ingotPerMiningTool %copperRequiredMiningTool
        set %_copperAmount %copperRequiredMiningTool * %miningToolsToCraft
        if ( %_copperAmount > #findStack )
            set %_copperAmount #findStack
        gosub dragDropContainer #findId %_copperAmount #backPackId
        msg $,automenu 'Colored Pickaxes' 'Copper Pickaxe'$
        goto _craftMiningTool
    }
}
gosub findItemContainer %dropContainerId RMK 0
if ( #result = #false || #findStack < %ironRequiredMiningTool )
    pause
set %_ingotType RMK
set %_ingotColor 0
set %_ingotPerMiningTool %ironRequiredMiningTool
set %_ironAmount %ironRequiredMiningTool * %miningToolsToCraft
if ( %_ironAmount > #findStack )
    set %_ironAmount #findStack
gosub dragDropContainer #findId %_ironAmount #backPackId
msg $,automenu 'Tinkering' 'Tools'$
msg $,automenu 'Tools' 'pickaxe'$
_craftMiningTool:
ignoreItem reset
_searchIngots:
findItem %_ingotType C_ , #backPackId
if ( #findKind = -1 )
    goto _dropTinkeringTools
if ( #findCol <> %_ingotColor )
{
    ignoreItem #findId
    goto _searchIngots
}
if ( #findStack < %_ingotPerMiningTool )
    goto _dropTinkeringTools
findItem %tinkeringTools C_ , #backPackId
set #lObjectId #findId
event macro 17
wait 80
goto _craftMiningTool
_dropTinkeringTools:
ignoreItem reset
findItem %tinkeringTools C_ , #backPackId
gosub dragDropContainer #findId 1 %dropContainerId
_dropMiningTools:
findItem %miningTools C_ , #backPackId
if ( #findKind = -1 )
    return
gosub dragDropContainer #findId 1 %dropContainerId 50 50
goto _dropMiningTools

sub rechargeRunebook
ignoreItem reset
gosub openContainer %dropContainerId
_rechargeRunebook:
findItem %recallScrolls C_ , %dropContainerId
if ( #findKind = -1 )
    pause ; Out of recall scrolls
if ( #findCol <> 0 )
{
    ignoreItem #findId
    goto rechargeRunebook
}
gosub dragDropContainer #findId %maxRunebookCharges %runebookId
findItem %recallScrolls C_ , #backPackId
set %recallScrollsUsed %recallScrollsUsed + ( %maxRunebookCharges - #findStack )
gosub dragDropContainer #findId #findStack %dropContainerId
return

; gosub openContainer [containerId]
sub openContainer
set %_containerId %1
_openContainer:
set #lObjectId %_containerId
event macro 17
set %_timeout #scnt + 10
_waitOpenContainer:
if ( %_timeout < #scnt )
    goto _openContainer
if ( #contId = %_containerId )
   return
goto _openContainer

sub updateLastDeathValues
gosub formatDateTime #date #time
set *miningLastDeathDateTime #result
ignoreItem reset
ignoreItem #charId
set *miningLastDeathPlayerAround ---
_miningLastDeathPlayerAround:
findItem %humans
if ( #findKind = -1 )
    goto _miningLastDeathJournal
if ( *miningLastDeathPlayerAround = --- )
    set *miningLastDeathPlayerAround #findId
else
    set *miningLastDeathPlayerAround *miningLastDeathPlayerAround , _ , #findId
ignoreItem #findId
goto _miningLastDeathPlayerAround
_miningLastDeathJournal:
set %_miningLastDeathJournalCounter 15
set %_miningLastDeathJournalIndexEnd #jIndex - 15
for %_miningLastDeathJournalIndex #jIndex %_miningLastDeathJournalIndexEnd
{
    scanJournal %_miningLastDeathJournalIndex
    set *miningLastDeathJournal . %_miningLastDeathJournalCounter #journal
    set %_miningLastDeathJournalCounter %_miningLastDeathJournalCounter - 1
}
return

; gosub formatDateTime date time
sub formatDateTime
set %_formatDateTimeDate %1
set %_formatDateTimeTime %2
set %_formatDateTime %_formatDateTimeDate , %_formatDateTimeTime
str Ins %_formatDateTime 20 0
str Ins #strRes - 5
str Ins #strRes - 8
str Ins #strRes #spc 11
str Ins #strRes : 14
str Ins #strRes : 17
return #strRes

sub resurrect
set %_resurrectX #charPosX
set %_resurrectY #charPosY
set %_resurrectTimer #scnt + ( %deathTimer * 60 )
_resurrect:
if ( #charGhost <> yes )
    return
msg $home home home$
wait 10
if ( #charPosX = %_resurrectX || #charPosY = %_resurrectY )
    goto _resurrect
_resurrectTimer:
if ( %_resurrectTimer >= #scnt )
    goto _resurrectTimer
gosub pathfind 5182 1250 0 1
gosub pathfind 5182 1237 0 1
gosub pathfind 5182 1228 10 0
gosub pathfind 5182 1223 40 1
move 5182 1223 1 30s
ignoreItem reset
_clickResurrectionStone:
findItem HTG G_1
if ( #findKind = -1 )
    goto _resurrect
if ( #findCol <> 66 )
{
    ignoreItem #findId
    goto _clickResurrectionStone
}
ignoreItem reset
set #lObjectId #findId
event macro 17
gosub waitGump 380 150
if ( #result = #false )
    goto _clickResurrectionStone
click 72 100
wait 120
if ( #charGhost = yes )
    goto _clickResurrectionStone
event macro 8 1 ; open paperdoll
event macro 8 2 ; open status
event macro 8 7 ; open backpack
wait 20
move 5194 1229 0 20s
return

; gosub waitGump width height
sub waitGump
set %_waitGumpWidth %1
set %_waitGumpHeight %2
set %_waitGumpTimeout #scnt + 5
_waitGump:
if ( %_waitGumpTimeout < #scnt )
    return #false
if ( #contSizeX = %_waitGumpWidth && #contSizeY = %_waitGumpHeight )
    return #true
goto _waitGump

sub dragDropContainer
if ( %useInjectionDragDrop = #true )
{
    if ( %0 = 5 )
        gosub injectionDragDropContainer %1 %2 %3 %4 %5
    else
        gosub injectionDragDropContainer %1 %2 %3
}
else
{
    if ( %0 = 5 )
        gosub easyuoDragDropContainer %1 %2 %3 %4 %5
    else
        gosub easyuoDragDropContainer %1 %2 %3
}
return

; gosub injectionDragDropContainer itemId amount containerId [x] [y]
sub injectionDragDropContainer
set %_injectionDragDropContainerItemId %1
set %_injectionDragDropContainerAmount %2
set %_injectionDragDropContainerContainerId %3
set %_injectionDragDropContainerX %4
set %_injectionDragDropContainerY %5
if ( %0 = 5 )
    msg $,moveitem %_injectionDragDropContainerItemId %_injectionDragDropContainerAmount %_injectionDragDropContainerContainerId %_injectionDragDropContainerX %_injectionDragDropContainerY 0$
else
    msg $,moveitem %_injectionDragDropContainerItemId %_injectionDragDropContainerAmount %_injectionDragDropContainerContainerId $
wait 30
return

; gosub easyuoDragDropContainer itemId amount containerId [x] [y]
sub easyuoDragDropContainer
set %_easyuoDragDropContainerItemId %1
set %_easyuoDragDropContainerAmount %2
set %_easyuoDragDropContainerContainerId %3
set %_easyuoDragDropContainerX %4
set %_easyuoDragDropContainerY %5
exevent drag %_easyuoDragDropContainerItemId %_easyuoDragDropContainerAmount
if ( %0 = 5 )
    exevent dropC %_easyuoDragDropContainerContainerId %_easyuoDragDropContainerX %_easyuoDragDropContainerY
else
    exevent dropC %_easyuoDragDropContainerContainerId
wait 10
return

sub getElapsedTime
set %_days 0
set %_hours 0
set %_minutes 0
set %_seconds #scnt - %start
while ( %_seconds >= 86400 )
{
    set %_days %_days + 1
    set %_seconds %_seconds - 86400
}
while ( %_seconds >= 3600 )
{
    set %_hours %_hours + 1
    set %_seconds %_seconds - 3600
}
while ( %_seconds >= 60 )
{
    set %_minutes %_minutes + 1
    set %_seconds %_seconds - 60
}

return %_days , d , #spc ,  %_hours , h , #spc ,  %_minutes , m , #spc , %_seconds , s

sub calculateNetProfit
set %_netProfit %ironCollected * %ironValue
set %_netProfit %_netProfit + ( %stoneCollected * %stoneValue )
set %_netProfit %_netProfit - ( %ironMiningToolsUsed * %ironMiningToolCost )
set %_netProfit %_netProfit - ( %recallScrollsUsed * %recallScrollCost )
set %_netProfit %_netProfit - ( %invisibilityPotionsUsed * %invisibilityPotionCost )
return %_netProfit

sub updateStatisticsMenu
linesPerCycle 1000
menu clear
menu window title Rukk's Mining Script
menu window color black
menu window size 750 300
menu font bgcolor black
menu font color lime
menu font style b
menu font size 14
menu text lblTitle 275 5 Rukk's Mining Script

menu font size 14
menu font color purple
menu text lblStatistics 10 40 Statistics
menu text lblLastDeathInformations 500 40 Last's Death

menu font size 10
menu text lblLastDeathDateTimeValue 620 43 ( , *miningLastDeathDateTime , )

menu font color white
menu font style b
menu font size 12
menu text lblCharName 10 70 Character:
menu text lblDeaths 300 70 Deaths:
menu text lblCurrentMine 10 90 Mine:
menu text lblTotalMines 300 90 Invis. potions:
menu text lblCurrentMineProgress 10 110 Current mine progress:
menu text lblPickaxes 300 110 Pickaxes:
menu text lblRecallScrolls 10 130 Recall scrolls:
menu text lblEstimatedNetProfit 300 130 Est. Net Profit:
menu text lblRunTime 10 150 Run time:
menu text lblLastDeathPlayersNear 500 70 Players' ID around:
menu text lblLastDeathJournal 500 110 Journal:

menu text lblIron 10 190 Iron:
menu text lblStone 130 190 Stone:
menu text lblCopper 250 190 Copper:
menu text lblAgapite 370 190 Agapite:
menu text lblSilver 10 210 Silver:
menu text lblShadow 130 210 Shadow:
menu text lblGold 250 210 Gold:
menu text lblRose 370 210 Rose:
menu text lblValorite 10 230 Valorite:
menu text lblVerite 130 230 Verite:
menu text lblMytheril 250 230 Mytheril:
menu text lblBloodrock 370 230 Bloodrock:
menu text lblBlackrock 10 250 Blackrock:
menu text lblPlatinum 130 250 Platinum:
menu text lblCarbonPolymer 250 250 Carbon:
menu text lblKevlar 370 250 Kevlar:
menu text lblDelta 10 270 Delta:
menu text lblLiquid 130 270 Liquid:
menu text lblRagnarok 250 270 Ragnarok:
menu text lblTotal 370 270 TOTAL:

menu font style
menu font color red
menu text lblCharNameValue 95 70 #charName
menu text lblDeathsValue 365 70 %deaths
menu text lblCurrentMineValue 52 90 %currentMine , / , %mines
menu text lblTotalMinesValue 410 90 %invisibilityPotionsUsed
set %_mineProgress %spotsMined * 100 / %spots
menu text lblCurrentMineProgressValue 190 110 %spotsMined , / , %spots , #spc , ( , %_mineProgress , % , )
menu text lblPickaxesValue 380 110 %ironMiningToolsUsed , / , %copperMiningToolsUsed , / , %agapiteMiningToolsUsed
menu text lblRecallScrollsValue 120 130 %recallScrollsUsed
gosub calculateNetProfit
menu text lblEstimatedNetProfitValue 415 130 #result
gosub getElapsedTime
menu text lblRunTimeValue 90 150 #result

menu text lblIronValue 50 190 %ironCollected
menu text lblStoneValue 185 190 %stoneCollected
menu text lblCopperValue 315 190 %copperCollected
menu text lblAgapiteValue 435 190 %agapiteCollected
menu text lblSilverValue 62 210 %silverCollected
menu text lblShadowValue 200 210 %shadowCollected
menu text lblGoldValue 295 210 %goldCollected
menu text lblRoseValue 420 210 %roseCollected
menu text lblValoriteValue 75 230 %valoriteCollected
menu text lblVeriteValue 180 230 %veriteCollected
menu text lblMytherilValue 320 230 %mytherilCollected
menu text lblBloodrockValue 460 230 %bloodrockCollected
menu text lblBlackrockValue 95 250 %blackrockCollected
menu text lblPlatinumValue 205 250 %platinumCollected
menu text lblCarbonPolymerValue 315 250 N/A
menu text lblKevlarValue 428 250 N/A
menu text lblDeltaValue 60 270 N/A
menu text lblLiquidValue 185 270 N/A
menu text lblRagnarokValue 332 270 N/A
set %_totalIngotsOres %ironCollected + %stoneCollected + %copperCollected + %agapiteCollected + %silverCollected + %shadowCollected + %goldCollected + %roseCollected + %valoriteCollected + %veriteCollected + %mytherilCollected + %bloodrockCollected + %blackrockCollected + %platinumCollected
menu text lblTotalValue 430 270 %_totalIngotsOres

menu font size 10
menu text lblLastDeathPlayersNearValue 500 90 *miningLastDeathPlayerAround
menu font size 7
menu text lblLastDeathJournal0Value 500 130 *miningLastDeathJournal0
menu text lblLastDeathJournal1Value 500 140 *miningLastDeathJournal1
menu text lblLastDeathJournal2Value 500 150 *miningLastDeathJournal2
menu text lblLastDeathJournal3Value 500 160 *miningLastDeathJournal3
menu text lblLastDeathJournal4Value 500 170 *miningLastDeathJournal4
menu text lblLastDeathJournal5Value 500 180 *miningLastDeathJournal5
menu text lblLastDeathJournal6Value 500 190 *miningLastDeathJournal6
menu text lblLastDeathJournal7Value 500 200 *miningLastDeathJournal7
menu text lblLastDeathJournal8Value 500 210 *miningLastDeathJournal8
menu text lblLastDeathJournal9Value 500 220 *miningLastDeathJournal9
menu text lblLastDeathJournal10Value 500 230 *miningLastDeathJournal10
menu text lblLastDeathJournal11Value 500 240 *miningLastDeathJournal11
menu text lblLastDeathJournal12Value 500 250 *miningLastDeathJournal12
menu text lblLastDeathJournal13Value 500 260 *miningLastDeathJournal13
menu text lblLastDeathJournal14Value 500 270 *miningLastDeathJournal14
menu text lblLastDeathJournal15Value 500 280 *miningLastDeathJournal15

menu show
linesPerCycle 10
return
